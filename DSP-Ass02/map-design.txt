
Map1:

	in:		a b c d e	?	n1	?
			a j c f e	?	n2	?
			...

	out:	<'c', <'a'	n1>>
			<'c', <'b'	n1>>
			<'c', <'d'	n1>>
			<'c', <'e'	n1>>
			<'c', <'a'	n2>>
			<'c', <'j'	n2>>
			<'c', <'f'	n2>>
			<'c', <'e'	n2>>

Reduce1:

	in:
		key		=	'c'
		values	=	[<'a' n1>,<'b' n1>,<'d' n1>,<'e' n1>,<'a' n2>,<'j' n2>,<'f' n2>,<'e' n2>]>

	out:
		key		=	'c' MEHANEc
		values	=	[<'a' n1+n2>,<'b' n1>,<'d' n1>,<'e' n1+n2>,<'j' n2>,<'f' n2>]
		
			
			MEHANEc = sqrt( (n1+n2)^2 + n1^2 + n1^2 + (n1+n2)^2 + n2^2 + n2^2 )
		
Map2:

	in:
		key		=	w1 MEHANEw1
		value	=	w' count1(w') w'' count1(w'') ... w'''' count1(w'''')
	
	out:
		<w', <w1 count1(w') MEHANEw1>>
		<w'', <w1 count1(w'') MEHANEw1>>
		...
		<w'''', <w1 count1(w'''') MEHANEw1>>
	
Reduce2:

	in:
		key		=	w'
		values	=	[<w1 count1(w') MEHANEw1>, ... , <w-n count-n(w') MEHANEw-n>]
	
	out:
		key		=	w'
		value	=	w1 w2 count1(w') count2(w') MEHANEw1 MEHANEw2
		
		key		=	w'
		value	=	w1 w3 count1(w') count3(w') MEHANEw1 MEHANEw3
		
		...
		
		key		=	w'
		value	=	wn-1 wn count-n-1(w') count-n(w') MEHANEwn-1 MEHANEwn

Map3:

	in:	
		key		=	w'
		value	=	w1 w2 count1(w') count2(w') MEHANEw1 MEHANEw2

	out:
		key		=	w1 w2 (MEHANEw1 * MEHANEw2)
		value	=	count1(w') * count2(w')

Reduce3:

	in:
		key		=	w1 w2 (MEHANEw1 * MEHANEw2)
		values	=	[ count1(w') * count2(w'), ..., count1(w'''') * count2(w'''') ]

	out:
		key		=	"w1,w2"
		value	=	MONE / (MEHANEw1 * MEHANEw2)	=	SIMILARITY
		
			MONE = (count1(w') * count2(w') + ... + count1(w'''') * count2(w''''))

Map4:

	in:
  		key		=	"w1,w2"
		value	=	SIMILARITY
		
	out:
		key		=	-SIMILARITY
		value	=	"w1,w2"

Reduce4:
	
	in:
  		key		=	-SIMILARITY
		values	=	[ "w1,w2", "wi,wj", ... , "wk,wn"]
		
	out:	
		key		=	"w1,w2"
		value	=	SIMILARITY
		
		...
		
		key		=	"wk,wn"
		value	=	SIMILARITY
		
		(just the first K pairs)
  