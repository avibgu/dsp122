"	1
"/logs/");	1
"/output/");	1
"/wordcount.jar")	1
"AviKeyPair";	1
"dsp122-avi-batel-ass02";	1
"s3n://"	1
(IOException	1
*	1
*/	1
+	7
../5gram/..	1
.runJobFlow(runFlowRequest);	1
.withActionOnFailure("TERMINATE_JOB_FLOW");	1
.withArgs("s3://datasets.elasticmapreduce/ngrams/books/20090715/heb-all/1gram/data",	1
.withHadoopJarStep(hadoopJarStep)	1
.withHadoopVersion("0.20").withEc2KeyName(KEY_PAIR)	1
.withInstanceCount(2)	1
.withJar("s3n://"	1
.withKeepJobFlowAliveWhenNoSteps(false)	1
.withLogUri("s3n://"	1
.withMainClass("example.WordCount")	1
.withMasterInstanceType(InstanceType.M1Small.toString())	1
.withName("jobname").withInstances(instances)	1
.withPlacement(new	1
.withSlaveInstanceType(InstanceType.M1Small.toString())	1
.withSteps(stepConfig)	1
/**	1
//	2
//TODO:	1
=	11
@param	1
AWSCredentials	1
AmazonElasticMapReduce	1
AmazonElasticMapReduceClient(	1
BUCKET_NAME	4
HadoopJarStepConfig	1
HadoopJarStepConfig()	1
JobFlowInstancesConfig	1
JobFlowInstancesConfig()	1
KEY_PAIR	1
Main	1
Main.class.getResourceAsStream("AwsCredentials.properties"));	1
PlacementType());	1
PropertiesCredentials(	1
RunJobFlowRequest	1
RunJobFlowRequest()	1
RunJobFlowResult	1
StepConfig	1
StepConfig().withName("stepname")	1
String	3
System.out.println("Ran	1
TODO:	1
This	1
a	1
application.	1
args	1
args)	1
be	1
catch	1
change	1
class	1
com.amazonaws.auth.AWSCredentials;	1
com.amazonaws.auth.PropertiesCredentials;	1
com.amazonaws.services.ec2.model.InstanceType;	1
com.amazonaws.services.elasticmapreduce.AmazonElasticMapReduce;	1
com.amazonaws.services.elasticmapreduce.AmazonElasticMapReduceClient;	1
com.amazonaws.services.elasticmapreduce.model.HadoopJarStepConfig;	1
com.amazonaws.services.elasticmapreduce.model.JobFlowInstancesConfig;	1
com.amazonaws.services.elasticmapreduce.model.PlacementType;	1
com.amazonaws.services.elasticmapreduce.model.RunJobFlowRequest;	1
com.amazonaws.services.elasticmapreduce.model.RunJobFlowResult;	1
com.amazonaws.services.elasticmapreduce.model.StepConfig;	1
credentials	2
credentials);	1
e)	1
e.printStackTrace();	1
exist..	1
final	2
flow	1
full	1
hadoopJarStep	1
id:	1
if	1
import	12
init	1
instances	1
it	1
java.io.IOException;	1
job	1
jobFlowId	1
jobFlowId);	1
main(String[]	1
main;	1
map	1
mapReduce	2
new	6
not	1
null;	1
package	1
private	2
public	2
reduce	1
runFlowRequest	1
runJobFlowResult	1
runJobFlowResult.getJobFlowId();	1
should	1
static	3
stepConfig	1
to	1
try	1
void	1
with	1
{	4
}	4
